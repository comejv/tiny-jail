{
  "WriteOpen": {
    "parameters": "path",
    "description": "open and possibly create a file for write",
    "implementations": [
      {
        "call": "open(path, flags)",
        "base_name": "open",
        "condition": "(flags & (O_WRONLY | O_APPEND | O_TRUNC))"
      },
      {
        "call": "open(path, flags, mode)",
        "base_name": "open",
        "condition": "(flags & (O_WRONLY | O_APPEND | O_TRUNC))"
      },
      {
        "call": "creat(path, mode)",
        "base_name": "creat"
      }
    ]
  },
  "ReadOpen": {
    "parameters": "path",
    "description": "open a file for read",
    "implementations": [
      {
        "call": "open(path,flags)",
        "base_name": "open",
        "condition": "(flags & O_RONLY)"
      },
      {
        "call": "open(path,flags,mode)",
        "base_name": "open",
        "condition": "(flags & O_RONLY)"
      }
    ]
  },
  "open_2": {
    "parameters": "path",
    "description": "open a file",
    "implementations": [
      {
        "call": "ReadOpen(path)",
        "base_name": "ReadOpen"
      },
      {
        "call": "WriteOpen(path)",
        "base_name": "WriteOpen"
      }
    ]
  },
  "truncate_2": {
    "parameters": "path, len",
    "description": "truncate a file to a specified length",
    "implementations": [
      {
        "call": "truncate(path, len)",
        "base_name": "truncate"
      },
      {
        "call": "ftruncate(fd, len)",
        "base_name": "ftruncate",
        "condition": "path = fdToName(fd)"
      }
    ]
  },
  "filePermCheck": {
    "parameters": "path",
    "description": "check file permission",
    "implementations": [
      {
        "call": "stat(path,buf)",
        "base_name": "stat"
      },
      {
        "call": "fstat(fd, buf)",
        "base_name": "fstat",
        "condition": "path = fdToName(fd)"
      },
      {
        "call": "lstat(path, buf)",
        "base_name": "lstat"
      },
      {
        "call": "access(path, mode)",
        "base_name": "access"
      }
    ]
  },
  "fileAttrCheck": {
    "parameters": "path",
    "description": "check any file attribute",
    "implementations": [
      {
        "call": "stat(path, buf)",
        "base_name": "stat"
      },
      {
        "call": "fstat(fd, buf)",
        "base_name": "fstat",
        "condition": "path = fdToName(fd)"
      },
      {
        "call": "lstat(path, buf)",
        "base_name": "lstat"
      }
    ]
  },
  "filePermChange": {
    "parameters": "path",
    "description": "change file permissions",
    "implementations": [
      {
        "call": "chmod_2(path, mode)",
        "base_name": "chmod_2"
      },
      {
        "call": "chown_2(path, owner, group)",
        "base_name": "chown_2"
      }
    ]
  },
  "stat_2": {
    "parameters": "path, buf",
    "description": "get\u00a0 file status",
    "implementations": [
      {
        "call": "stat(path, buf)",
        "base_name": "stat"
      },
      {
        "call": "fstat(fd, buf)",
        "base_name": "fstat",
        "condition": "path = fdToName(fd)"
      }
    ]
  },
  "chmod_2": {
    "parameters": "path, mode",
    "description": "change permissions of a file",
    "implementations": [
      {
        "call": "chmod(path, mode)",
        "base_name": "chmod"
      },
      {
        "call": "fchmod(fd, mode)",
        "base_name": "fchmod",
        "condition": "path = fdToName(fd)"
      }
    ]
  },
  "chown_2": {
    "parameters": "path, owner, group",
    "description": "change ownership of a file",
    "implementations": [
      {
        "call": "chown(path, owner, group)",
        "base_name": "chown"
      },
      {
        "call": "fchown(fd, owner, group)",
        "base_name": "fchown",
        "condition": "path = fdToName(fd)"
      }
    ]
  },
  "link_2": {
    "parameters": "oldpath, newpath",
    "description": "make a new name for a file",
    "implementations": [
      {
        "call": "link(oldpath, newpath)",
        "base_name": "link"
      },
      {
        "call": "symlink(topath, frompath)",
        "base_name": "symlink"
      }
    ]
  },
  "lseek_2": {
    "parameters": "fd, offset, whence",
    "description": "reposition read/write file\noffset",
    "implementations": [
      {
        "call": "_llseek(fd, offset_high, offset_low, * , whence)",
        "base_name": "_llseek"
      },
      {
        "call": "offset = (offset_high<<32)",
        "base_name": "offset",
        "condition": "offset_low,  lseek(fd, offset, whence)"
      }
    ]
  },
  "mkdir_2": {
    "parameters": "path, mode",
    "description": "create a directory",
    "implementations": [
      {
        "call": "mkdir(path, mode)",
        "base_name": "mkdir"
      },
      {
        "call": "mknod(path, mode, *)",
        "base_name": "mknod"
      }
    ]
  },
  "chdir_2": {
    "parameters": "path",
    "description": "change working directory",
    "implementations": [
      {
        "call": "chdir(path)",
        "base_name": "chdir"
      },
      {
        "call": "fchdir(fd)",
        "base_name": "fchdir",
        "condition": "path = fdToName(fd)"
      }
    ]
  },
  "recv_2": {
    "parameters": "s, buf, len, flag",
    "description": "receive a\nmessage from a socket",
    "implementations": [
      {
        "call": "recv(s, buf, len, flag)",
        "base_name": "recv"
      },
      {
        "call": "recvfrom( s, buf, len, flag, *)",
        "base_name": "recvfrom"
      },
      {
        "call": "recvmsg(s, msg, flag)",
        "base_name": "recvmsg",
        "condition": "buf = FUN get_buf(*msg)"
      },
      {
        "call": "len = FUN get_len(*msg)",
        "base_name": "len"
      }
    ]
  },
  "send_2": {
    "parameters": "s, msg, len, flag",
    "description": "send a\nmessage to a socket",
    "implementations": [
      {
        "call": "send(s, msg, len, flag)",
        "base_name": "send"
      },
      {
        "call": "sendto( s, msg, len, flag, *)",
        "base_name": "sendto"
      },
      {
        "call": "sendmsg(s, msg, flag)",
        "base_name": "sendmsg",
        "condition": "len = FUN get_len(*msg)"
      }
    ]
  },
  "gethostid_2": {
    "parameters": "",
    "description": "get the unique identifier of the current host",
    "implementations": [
      {
        "call": "gethostid(void)",
        "base_name": "gethostid"
      },
      {
        "call": "gethostname(name, len)",
        "base_name": "gethostname",
        "condition": "return_value = NameToId(name)"
      }
    ]
  },
  "sethostid_2": {
    "parameters": "",
    "description": "set the unique identifier of the current host",
    "implementations": [
      {
        "call": "sethostid(void)",
        "base_name": "sethostid"
      },
      {
        "call": "sethostname(name, len)",
        "base_name": "sethostname",
        "condition": "return_value = NameToId(name)"
      }
    ]
  },
  "dup_2": {
    "parameters": "fd",
    "description": "duplicate a file descriptor",
    "implementations": [
      {
        "call": "dup(fd)",
        "base_name": "dup"
      },
      {
        "call": "dup2(oldfd, newfd)",
        "base_name": "dup2",
        "condition": "return_value = newfd"
      }
    ]
  },
  "fcntl_2": {
    "parameters": "fd, cmd",
    "description": "manipulate file descriptor",
    "implementations": [
      {
        "call": "fcntl(fd, cmd)",
        "base_name": "fcntl"
      },
      {
        "call": "fcntl(fd, cmd, arg)",
        "base_name": "fcntl"
      }
    ]
  },
  "kill_2": {
    "parameters": "pid,sig",
    "description": "send signal to a process",
    "implementations": [
      {
        "call": "kill(pid, sig)",
        "base_name": "kill"
      },
      {
        "call": "killpg(pgrp, sig)",
        "base_name": "killpg",
        "condition": "pid = pgrp"
      }
    ]
  },
  "getuid_2": {
    "parameters": "",
    "description": "get real user ID",
    "implementations": [
      {
        "call": "geteuid(void)",
        "base_name": "geteuid"
      },
      {
        "call": "getresuid(ruid, euid, suid)",
        "base_name": "getresuid",
        "condition": "return_value = ruid"
      }
    ]
  },
  "geteuid_2": {
    "parameters": "",
    "description": "get effective user ID",
    "implementations": [
      {
        "call": "geteuid(void)",
        "base_name": "geteuid"
      },
      {
        "call": "getresuid(ruid, euid, suid)",
        "base_name": "getresuid",
        "condition": "return_value = euid"
      }
    ]
  },
  "getgid_2": {
    "parameters": "",
    "description": "get real group ID",
    "implementations": [
      {
        "call": "getgid()",
        "base_name": "getgid"
      },
      {
        "call": "getresgid(rgid, egid, sgid)",
        "base_name": "getresgid",
        "condition": "return_value = rgid"
      }
    ]
  },
  "getegid_2": {
    "parameters": "",
    "description": "get effective group ID",
    "implementations": [
      {
        "call": "getegid()",
        "base_name": "getegid"
      },
      {
        "call": "getresgid(rgid, egid, sgid)",
        "base_name": "getresgid",
        "condition": "return_value = egid"
      }
    ]
  },
  "getpgid_2": {
    "parameters": "pid",
    "description": "get process group ID",
    "implementations": [
      {
        "call": "getpgid(pid)",
        "base_name": "getpgid"
      },
      {
        "call": "getpgrp(void)",
        "base_name": "getpgrp",
        "condition": "pid = 0"
      }
    ]
  },
  "setuid_2": {
    "parameters": "",
    "description": "set real user ID )",
    "implementations": [
      {
        "call": "seteuid(void)",
        "base_name": "seteuid"
      },
      {
        "call": "setresuid(ruid, euid, suid)",
        "base_name": "setresuid",
        "condition": "return_value = ruid"
      }
    ]
  },
  "seteuid_2": {
    "parameters": "",
    "description": "set effective user ID",
    "implementations": [
      {
        "call": "seteuid(void)",
        "base_name": "seteuid"
      },
      {
        "call": "setresuid(ruid, euid, suid)",
        "base_name": "setresuid",
        "condition": "return_value = euid"
      }
    ]
  },
  "setgid_2": {
    "parameters": "",
    "description": "set real group ID",
    "implementations": [
      {
        "call": "setgid()",
        "base_name": "setgid"
      },
      {
        "call": "setresgid(rgid, egid, sgid)",
        "base_name": "setresgid",
        "condition": "return_value = rgid"
      }
    ]
  },
  "setegid_2": {
    "parameters": "",
    "description": "set effective group ID",
    "implementations": [
      {
        "call": "setegid()",
        "base_name": "setegid"
      },
      {
        "call": "setresgid(rgid, egid, sgid)",
        "base_name": "setresgid",
        "condition": "return_value = egid"
      }
    ]
  }
}
